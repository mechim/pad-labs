// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: vynild/review/models/album.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "vynild.review.models";

export interface CreateAlbum {
  title: string;
  artist: string;
  genre: string;
  releaseYear: number;
  label: string;
  albumArt: string;
}

export interface AlbumData {
  id: string;
  title: string;
  artist: string;
  genre: string;
  releaseYear: number;
  label: string;
  albumArt: string;
}

function createBaseCreateAlbum(): CreateAlbum {
  return { title: "", artist: "", genre: "", releaseYear: 0, label: "", albumArt: "" };
}

export const CreateAlbum: MessageFns<CreateAlbum> = {
  encode(message: CreateAlbum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.artist !== "") {
      writer.uint32(18).string(message.artist);
    }
    if (message.genre !== "") {
      writer.uint32(26).string(message.genre);
    }
    if (message.releaseYear !== 0) {
      writer.uint32(32).int32(message.releaseYear);
    }
    if (message.label !== "") {
      writer.uint32(42).string(message.label);
    }
    if (message.albumArt !== "") {
      writer.uint32(50).string(message.albumArt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAlbum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAlbum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.artist = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.genre = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.releaseYear = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.label = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.albumArt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAlbum {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      artist: isSet(object.artist) ? globalThis.String(object.artist) : "",
      genre: isSet(object.genre) ? globalThis.String(object.genre) : "",
      releaseYear: isSet(object.releaseYear) ? globalThis.Number(object.releaseYear) : 0,
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      albumArt: isSet(object.albumArt) ? globalThis.String(object.albumArt) : "",
    };
  },

  toJSON(message: CreateAlbum): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.artist !== "") {
      obj.artist = message.artist;
    }
    if (message.genre !== "") {
      obj.genre = message.genre;
    }
    if (message.releaseYear !== 0) {
      obj.releaseYear = Math.round(message.releaseYear);
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.albumArt !== "") {
      obj.albumArt = message.albumArt;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAlbum>): CreateAlbum {
    return CreateAlbum.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAlbum>): CreateAlbum {
    const message = createBaseCreateAlbum();
    message.title = object.title ?? "";
    message.artist = object.artist ?? "";
    message.genre = object.genre ?? "";
    message.releaseYear = object.releaseYear ?? 0;
    message.label = object.label ?? "";
    message.albumArt = object.albumArt ?? "";
    return message;
  },
};

function createBaseAlbumData(): AlbumData {
  return { id: "", title: "", artist: "", genre: "", releaseYear: 0, label: "", albumArt: "" };
}

export const AlbumData: MessageFns<AlbumData> = {
  encode(message: AlbumData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.artist !== "") {
      writer.uint32(26).string(message.artist);
    }
    if (message.genre !== "") {
      writer.uint32(34).string(message.genre);
    }
    if (message.releaseYear !== 0) {
      writer.uint32(40).int32(message.releaseYear);
    }
    if (message.label !== "") {
      writer.uint32(50).string(message.label);
    }
    if (message.albumArt !== "") {
      writer.uint32(58).string(message.albumArt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlbumData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlbumData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.artist = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.genre = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.releaseYear = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.label = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.albumArt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlbumData {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      artist: isSet(object.artist) ? globalThis.String(object.artist) : "",
      genre: isSet(object.genre) ? globalThis.String(object.genre) : "",
      releaseYear: isSet(object.releaseYear) ? globalThis.Number(object.releaseYear) : 0,
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      albumArt: isSet(object.albumArt) ? globalThis.String(object.albumArt) : "",
    };
  },

  toJSON(message: AlbumData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.artist !== "") {
      obj.artist = message.artist;
    }
    if (message.genre !== "") {
      obj.genre = message.genre;
    }
    if (message.releaseYear !== 0) {
      obj.releaseYear = Math.round(message.releaseYear);
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.albumArt !== "") {
      obj.albumArt = message.albumArt;
    }
    return obj;
  },

  create(base?: DeepPartial<AlbumData>): AlbumData {
    return AlbumData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlbumData>): AlbumData {
    const message = createBaseAlbumData();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.artist = object.artist ?? "";
    message.genre = object.genre ?? "";
    message.releaseYear = object.releaseYear ?? 0;
    message.label = object.label ?? "";
    message.albumArt = object.albumArt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
