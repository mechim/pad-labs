// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: vynild/review/models/review.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UserData } from "./user";

export const protobufPackage = "vynild.review.models";

export interface Review {
  id: string;
  user: UserData | undefined;
  rating: number;
  reviewText: string;
}

function createBaseReview(): Review {
  return { id: "", user: undefined, rating: 0, reviewText: "" };
}

export const Review: MessageFns<Review> = {
  encode(message: Review, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.rating !== 0) {
      writer.uint32(25).double(message.rating);
    }
    if (message.reviewText !== "") {
      writer.uint32(34).string(message.reviewText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Review {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.rating = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.reviewText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Review {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined,
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      reviewText: isSet(object.reviewText) ? globalThis.String(object.reviewText) : "",
    };
  },

  toJSON(message: Review): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    if (message.rating !== 0) {
      obj.rating = message.rating;
    }
    if (message.reviewText !== "") {
      obj.reviewText = message.reviewText;
    }
    return obj;
  },

  create(base?: DeepPartial<Review>): Review {
    return Review.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Review>): Review {
    const message = createBaseReview();
    message.id = object.id ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    message.rating = object.rating ?? 0;
    message.reviewText = object.reviewText ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
