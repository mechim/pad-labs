// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: vynild/review/services/album_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { AlbumData } from "../models/album";

export const protobufPackage = "vynild.review.services";

export interface GetAlbumRequest {
  albumId: string;
}

export interface GetAlbumResponse {
  album: AlbumData | undefined;
}

export interface GetAlbumsRequest {
  artistId: string;
}

export interface GetAlbumsResponse {
  albums: AlbumData[];
}

function createBaseGetAlbumRequest(): GetAlbumRequest {
  return { albumId: "" };
}

export const GetAlbumRequest: MessageFns<GetAlbumRequest> = {
  encode(message: GetAlbumRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.albumId !== "") {
      writer.uint32(10).string(message.albumId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlbumRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlbumRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.albumId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlbumRequest {
    return { albumId: isSet(object.albumId) ? globalThis.String(object.albumId) : "" };
  },

  toJSON(message: GetAlbumRequest): unknown {
    const obj: any = {};
    if (message.albumId !== "") {
      obj.albumId = message.albumId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlbumRequest>): GetAlbumRequest {
    return GetAlbumRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlbumRequest>): GetAlbumRequest {
    const message = createBaseGetAlbumRequest();
    message.albumId = object.albumId ?? "";
    return message;
  },
};

function createBaseGetAlbumResponse(): GetAlbumResponse {
  return { album: undefined };
}

export const GetAlbumResponse: MessageFns<GetAlbumResponse> = {
  encode(message: GetAlbumResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.album !== undefined) {
      AlbumData.encode(message.album, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlbumResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlbumResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.album = AlbumData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlbumResponse {
    return { album: isSet(object.album) ? AlbumData.fromJSON(object.album) : undefined };
  },

  toJSON(message: GetAlbumResponse): unknown {
    const obj: any = {};
    if (message.album !== undefined) {
      obj.album = AlbumData.toJSON(message.album);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlbumResponse>): GetAlbumResponse {
    return GetAlbumResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlbumResponse>): GetAlbumResponse {
    const message = createBaseGetAlbumResponse();
    message.album = (object.album !== undefined && object.album !== null)
      ? AlbumData.fromPartial(object.album)
      : undefined;
    return message;
  },
};

function createBaseGetAlbumsRequest(): GetAlbumsRequest {
  return { artistId: "" };
}

export const GetAlbumsRequest: MessageFns<GetAlbumsRequest> = {
  encode(message: GetAlbumsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artistId !== "") {
      writer.uint32(10).string(message.artistId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlbumsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlbumsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.artistId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlbumsRequest {
    return { artistId: isSet(object.artistId) ? globalThis.String(object.artistId) : "" };
  },

  toJSON(message: GetAlbumsRequest): unknown {
    const obj: any = {};
    if (message.artistId !== "") {
      obj.artistId = message.artistId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlbumsRequest>): GetAlbumsRequest {
    return GetAlbumsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlbumsRequest>): GetAlbumsRequest {
    const message = createBaseGetAlbumsRequest();
    message.artistId = object.artistId ?? "";
    return message;
  },
};

function createBaseGetAlbumsResponse(): GetAlbumsResponse {
  return { albums: [] };
}

export const GetAlbumsResponse: MessageFns<GetAlbumsResponse> = {
  encode(message: GetAlbumsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.albums) {
      AlbumData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlbumsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlbumsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.albums.push(AlbumData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlbumsResponse {
    return {
      albums: globalThis.Array.isArray(object?.albums) ? object.albums.map((e: any) => AlbumData.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetAlbumsResponse): unknown {
    const obj: any = {};
    if (message.albums?.length) {
      obj.albums = message.albums.map((e) => AlbumData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlbumsResponse>): GetAlbumsResponse {
    return GetAlbumsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlbumsResponse>): GetAlbumsResponse {
    const message = createBaseGetAlbumsResponse();
    message.albums = object.albums?.map((e) => AlbumData.fromPartial(e)) || [];
    return message;
  },
};

export type AlbumServiceDefinition = typeof AlbumServiceDefinition;
export const AlbumServiceDefinition = {
  name: "AlbumService",
  fullName: "vynild.review.services.AlbumService",
  methods: {
    getAlbum: {
      name: "GetAlbum",
      requestType: GetAlbumRequest,
      requestStream: false,
      responseType: GetAlbumResponse,
      responseStream: false,
      options: {},
    },
    getAlbums: {
      name: "GetAlbums",
      requestType: GetAlbumsRequest,
      requestStream: false,
      responseType: GetAlbumsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AlbumServiceImplementation<CallContextExt = {}> {
  getAlbum(request: GetAlbumRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetAlbumResponse>>;
  getAlbums(request: GetAlbumsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetAlbumsResponse>>;
}

export interface AlbumServiceClient<CallOptionsExt = {}> {
  getAlbum(request: DeepPartial<GetAlbumRequest>, options?: CallOptions & CallOptionsExt): Promise<GetAlbumResponse>;
  getAlbums(request: DeepPartial<GetAlbumsRequest>, options?: CallOptions & CallOptionsExt): Promise<GetAlbumsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
