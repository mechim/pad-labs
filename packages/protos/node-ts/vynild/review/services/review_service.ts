// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: vynild/review/services/review_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Review } from "../models/review";

export const protobufPackage = "vynild.review.services";

export interface GetReviewRequest {
  reviewId: string;
}

export interface GetReviewResponse {
  review: Review | undefined;
}

export interface GetReviewsRequest {
  albumId: string;
}

export interface GetReviewsResponse {
  reviews: Review[];
}

export interface CreateReviewRequest {
  userId: string;
  rating: number;
  reviewText: string;
  albumId: string;
}

export interface CreateReviewResponse {
  reviewId: string;
}

function createBaseGetReviewRequest(): GetReviewRequest {
  return { reviewId: "" };
}

export const GetReviewRequest: MessageFns<GetReviewRequest> = {
  encode(message: GetReviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reviewId !== "") {
      writer.uint32(10).string(message.reviewId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reviewId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReviewRequest {
    return { reviewId: isSet(object.reviewId) ? globalThis.String(object.reviewId) : "" };
  },

  toJSON(message: GetReviewRequest): unknown {
    const obj: any = {};
    if (message.reviewId !== "") {
      obj.reviewId = message.reviewId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReviewRequest>): GetReviewRequest {
    return GetReviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReviewRequest>): GetReviewRequest {
    const message = createBaseGetReviewRequest();
    message.reviewId = object.reviewId ?? "";
    return message;
  },
};

function createBaseGetReviewResponse(): GetReviewResponse {
  return { review: undefined };
}

export const GetReviewResponse: MessageFns<GetReviewResponse> = {
  encode(message: GetReviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.review !== undefined) {
      Review.encode(message.review, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.review = Review.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReviewResponse {
    return { review: isSet(object.review) ? Review.fromJSON(object.review) : undefined };
  },

  toJSON(message: GetReviewResponse): unknown {
    const obj: any = {};
    if (message.review !== undefined) {
      obj.review = Review.toJSON(message.review);
    }
    return obj;
  },

  create(base?: DeepPartial<GetReviewResponse>): GetReviewResponse {
    return GetReviewResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReviewResponse>): GetReviewResponse {
    const message = createBaseGetReviewResponse();
    message.review = (object.review !== undefined && object.review !== null)
      ? Review.fromPartial(object.review)
      : undefined;
    return message;
  },
};

function createBaseGetReviewsRequest(): GetReviewsRequest {
  return { albumId: "" };
}

export const GetReviewsRequest: MessageFns<GetReviewsRequest> = {
  encode(message: GetReviewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.albumId !== "") {
      writer.uint32(10).string(message.albumId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReviewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReviewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.albumId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReviewsRequest {
    return { albumId: isSet(object.albumId) ? globalThis.String(object.albumId) : "" };
  },

  toJSON(message: GetReviewsRequest): unknown {
    const obj: any = {};
    if (message.albumId !== "") {
      obj.albumId = message.albumId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReviewsRequest>): GetReviewsRequest {
    return GetReviewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReviewsRequest>): GetReviewsRequest {
    const message = createBaseGetReviewsRequest();
    message.albumId = object.albumId ?? "";
    return message;
  },
};

function createBaseGetReviewsResponse(): GetReviewsResponse {
  return { reviews: [] };
}

export const GetReviewsResponse: MessageFns<GetReviewsResponse> = {
  encode(message: GetReviewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reviews) {
      Review.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReviewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReviewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reviews.push(Review.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReviewsResponse {
    return {
      reviews: globalThis.Array.isArray(object?.reviews) ? object.reviews.map((e: any) => Review.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetReviewsResponse): unknown {
    const obj: any = {};
    if (message.reviews?.length) {
      obj.reviews = message.reviews.map((e) => Review.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetReviewsResponse>): GetReviewsResponse {
    return GetReviewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReviewsResponse>): GetReviewsResponse {
    const message = createBaseGetReviewsResponse();
    message.reviews = object.reviews?.map((e) => Review.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateReviewRequest(): CreateReviewRequest {
  return { userId: "", rating: 0, reviewText: "", albumId: "" };
}

export const CreateReviewRequest: MessageFns<CreateReviewRequest> = {
  encode(message: CreateReviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.rating !== 0) {
      writer.uint32(17).double(message.rating);
    }
    if (message.reviewText !== "") {
      writer.uint32(26).string(message.reviewText);
    }
    if (message.albumId !== "") {
      writer.uint32(34).string(message.albumId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.rating = reader.double();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reviewText = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.albumId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReviewRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      reviewText: isSet(object.reviewText) ? globalThis.String(object.reviewText) : "",
      albumId: isSet(object.albumId) ? globalThis.String(object.albumId) : "",
    };
  },

  toJSON(message: CreateReviewRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.rating !== 0) {
      obj.rating = message.rating;
    }
    if (message.reviewText !== "") {
      obj.reviewText = message.reviewText;
    }
    if (message.albumId !== "") {
      obj.albumId = message.albumId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReviewRequest>): CreateReviewRequest {
    return CreateReviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReviewRequest>): CreateReviewRequest {
    const message = createBaseCreateReviewRequest();
    message.userId = object.userId ?? "";
    message.rating = object.rating ?? 0;
    message.reviewText = object.reviewText ?? "";
    message.albumId = object.albumId ?? "";
    return message;
  },
};

function createBaseCreateReviewResponse(): CreateReviewResponse {
  return { reviewId: "" };
}

export const CreateReviewResponse: MessageFns<CreateReviewResponse> = {
  encode(message: CreateReviewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reviewId !== "") {
      writer.uint32(10).string(message.reviewId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reviewId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReviewResponse {
    return { reviewId: isSet(object.reviewId) ? globalThis.String(object.reviewId) : "" };
  },

  toJSON(message: CreateReviewResponse): unknown {
    const obj: any = {};
    if (message.reviewId !== "") {
      obj.reviewId = message.reviewId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReviewResponse>): CreateReviewResponse {
    return CreateReviewResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReviewResponse>): CreateReviewResponse {
    const message = createBaseCreateReviewResponse();
    message.reviewId = object.reviewId ?? "";
    return message;
  },
};

export type ReviewServiceDefinition = typeof ReviewServiceDefinition;
export const ReviewServiceDefinition = {
  name: "ReviewService",
  fullName: "vynild.review.services.ReviewService",
  methods: {
    getReview: {
      name: "GetReview",
      requestType: GetReviewRequest,
      requestStream: false,
      responseType: GetReviewResponse,
      responseStream: false,
      options: {},
    },
    getReviews: {
      name: "GetReviews",
      requestType: GetReviewsRequest,
      requestStream: false,
      responseType: GetReviewsResponse,
      responseStream: false,
      options: {},
    },
    createReview: {
      name: "CreateReview",
      requestType: CreateReviewRequest,
      requestStream: false,
      responseType: CreateReviewResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ReviewServiceImplementation<CallContextExt = {}> {
  getReview(request: GetReviewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetReviewResponse>>;
  getReviews(
    request: GetReviewsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetReviewsResponse>>;
  createReview(
    request: CreateReviewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateReviewResponse>>;
}

export interface ReviewServiceClient<CallOptionsExt = {}> {
  getReview(request: DeepPartial<GetReviewRequest>, options?: CallOptions & CallOptionsExt): Promise<GetReviewResponse>;
  getReviews(
    request: DeepPartial<GetReviewsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetReviewsResponse>;
  createReview(
    request: DeepPartial<CreateReviewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateReviewResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
